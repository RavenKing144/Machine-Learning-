# -*- coding: utf-8 -*-
"""mushroom_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y8FBsNrhl5t-PxdsQVdyVe0RiSfAIpjS
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/mushrooms.csv')

le = LabelEncoder()
df = df.apply(le.fit_transform)

data = df.values

data_y = data[:,0]
data_x = data[:,1:]

x_train, x_test, y_train, y_test = train_test_split(data_x, data_y, test_size = 0.1)

def prior_prob(y_train, label):
  z = 0
  for i in range(y_train.shape[0]):
    if y_train[i] == label:
      z += 1
  return z/float(y_train.shape[0])

def cond_prob(x_train, y_train, col, val, label):
  x_train = x_train[y_train == label]
  z = 0
  for i in range(y_train.shape[0]):
    if y_train[i] == label:
      z += 1
  x_train = x_train[:,col]
  y = 0
  for i in range(x_train.shape[0]):
    if x_train[i] == val:
      y += 1
  return y/z

def predict(x_train, y_train, xtest):
  classes = np.unique(y_train)
  features = x_train.shape[1]
  post_prob = []
  for label in classes:
    likelihood =  1.0
    for col in range(features):
      likelihood *= cond_prob(x_train, y_train, col, xtest[col],label )
    post_prob.append(likelihood*prior_prob(y_train,label))
  return np.argmax(post_prob)

y_test[2] , predict(x_train,y_train, x_test[2])

def accuracy(x_train,y_train,x_test,y_test):
  prediction = []
  for i in range(y_test.shape[0]):
    prediction.append(predict(x_train,y_train,x_test[i]))
  return np.sum(y_test == np.array(prediction))/y_test.shape[0]

print(accuracy(x_train,y_train,x_test,y_test))