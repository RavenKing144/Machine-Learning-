# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZTawV2aAw12eMepEEKS8iReXErq2_IAM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification

x,y = make_classification(n_samples= 400, n_classes=2,n_features=2,n_clusters_per_class=1,n_redundant=0, random_state=3)
y[y==0] = -1
plt.scatter(x[:,0],x[:,1], c=y)
plt.show()

class SVM:
  def __init__(self, c=1.0):
    self.c = c
    self.w = 0
    self.b = 0
  def hingeloss(self, w, b, x, y):
    loss = 0
    loss += 0.5*np.dot(w,w.T)
    for i in range(x.shape[0]):
      loss += self.c * max(0, 1 - (y[i]*(np.dot(w,x[i].T)+b)))
    return loss[0][0]
  def fit(self, x,y,learning_rate = 0.001, batch_size = 100, maxItr=300):
    n_features = x.shape[1]
    n_samples = x.shape[0]
    c = self.c
    n = learning_rate
    w = np.zeros((1, n_features))
    bias = 0
    losses = []
    for i in range(maxItr):
      l = self.hingeloss(w,bias,x,y)
      losses.append(l)
      ids = np.arange(n_samples)
      np.random.shuffle(ids)
      for batch_start in range(0, n_samples, batch_size):
        dl = 0
        db = 0
        for j in range(batch_start, batch_start+batch_size):
          if j < n_samples:
            ti = y[i]*(np.dot(w,x[i].T)+bias)
            i = ids[j]
            if ti<1:
              dl += y[i]*c*x[i]
              db += c*y[i]
        w = w - n*w + n*dl
        bias = bias + n*db
    self.w = w
    self.b = bias
    return w, bias, losses

mySVM = SVM(c=1)
w,b,losses = mySVM.fit(x,y,maxItr=50)

plt.plot(losses)
plt.show()

def plothyperplane(w1,w2,b):
    plt.figure(figsize=(10,10))
    plt.scatter(x[:,0],x[:,1], c=y)
    x1 = np.linspace(-2,4,10)
    x2 = -(w1*x1+b)/w2
    xp = -(w1*x1+b+1)/w2
    xn = -(w1*x1+b-1)/w2
    plt.plot(x1,x2,label="neutral hyperplane")
    plt.plot(x1,xp,label="poaitive hyperplane")
    plt.plot(x1,xn,label="negative hyperplane")
    plt.legend()
    plt.show()

w,b = mySVM.w, mySVM.b
plothyperplane(w[0,0],w[0,1],b)

