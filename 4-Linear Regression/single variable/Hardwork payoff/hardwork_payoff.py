# -*- coding: utf-8 -*-
"""Hardwork_payoff.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19YyvE96Xc_JB41Jmk6QYnKXQhP6kzlPi

importing libraries
"""

import numpy as np
from matplotlib import pyplot as plt
import pandas as pd

"""**data preparation**

loading data sets
"""

X = pd.read_csv('Linear_X_Train.csv')
Y = pd.read_csv('Linear_Y_Train.csv')
X_Test = pd.read_csv('Linear_X_Test.csv')
Y_Test = pd.read_csv('sample_submission_linear.csv')

"""conversion into numpy arrays"""

X = np.array(X)
Y = np.array(Y)
X_Test = np.array(X_Test)
Y_Test = np.array(Y_Test)

"""Normalization"""

x_mean = X.mean()
std = X.std()
X = (X-x_mean)/std

"""Visualisation of data"""

plt.style.use('seaborn')
plt.title('Hardwork vs Performance')
plt.xlabel("Hardwork in terms of time")
plt.ylabel("performance in terms of marks")
plt.scatter(X,Y)
plt.show()

"""**Linear Regression**

Hypothesis function
"""

def hypothesis(x,theta):
  return (theta[0]+x*theta[1])

"""function to find gradient against theta0 and theta1"""

def gradient(X,Y,theta):
  m = X.shape[0]
  grad = np.zeros((2,))
  for i in range(m):
    x = X[i]
    y = Y[i]
    y_ = hypothesis(x,theta)
    grad[0]+= (y_-y)
    grad[1]+= (y_ -y)*x
  return grad/m

"""function to compute error"""

def error(X,Y,theta):
  m =X.shape[0]
  error_list =[]
  total_error = 0.0
  for i in range(m):
    y_ = hypothesis(X[i],theta)
    total_error += (y_ - Y[i])**2
    error_list.append((y_ - Y[i])**2)
  return total_error/m

"""gradient descent function"""

def grad_des(X,Y,max_step=100,learn_rate=0.1):
  theta = np.zeros((2,))
  error_list = []
  for i in range(max_step):
    grad = gradient(X,Y,theta)
    error_list.append(error(X,Y,theta))
    theta[0] = theta[0] - learn_rate*grad[0]
    theta[1] = theta[1] - learn_rate*grad[1]
  return theta, error_list

theta,error_list = grad_des(X,Y)


plt.style.use('seaborn')
plt.title('Reduction in error')
plt.xlabel('Number of epocs')
plt.ylabel('Error')
plt.plot(error_list)
plt.show()

"""**Prediction and best fit line**

best fit line
"""

y_ = hypothesis(X,theta)

plt.scatter(X,Y)
plt.plot(X,y_,color='orange', label = 'Prediction')
plt.legend()
plt.show()

"""prediction on test data"""

y_test = hypothesis(X_Test,theta)
print(y_test)

"""**Saving results in csv**"""

df = pd.DataFrame(data = y_test, columns=['y'])
df.to_csv('y_prediction.csv', index = False)

